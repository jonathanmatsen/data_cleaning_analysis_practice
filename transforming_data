#rename columns
mapping = {'Economy (GDP per Capita)': 'Economy', 'Health (Life Expectancy)': 'Health', 'Trust (Government Corruption)': 'Trust' }

happiness2015 = happiness2015.rename(mapping, axis=1)

# map and apply methods

def label(element):
    if element > 1:
        return 'High'
    else:
        return 'Low'

economy_impact_map = happiness2015['Economy'].map(label)

economy_impact_apply = happiness2015['Economy'].apply(label)

equal = economy_impact_map.equals(economy_impact_apply)

#apply method with argument

def label(element, x):
    if element > x:
        return 'High'
    else:
        return 'Low'

economy_impact_apply = happiness2015['Economy'].apply(label, x=0.8)

# multiple columns with applymap

def label(element):
    if element > 1:
        return 'High'
    else:
        return 'Low'
economy_apply = happiness2015['Economy'].apply(label)
factors = ['Economy', 'Family', 'Health', 'Freedom', 'Trust', 'Generosity']

factors_impact = happiness2015[factors].applymap(label)

#apply functions along an axis using df.apply() method

def v_counts(col):
    num = col.value_counts()
    den = col.size
    pct = num/den

    return pct

v_counts_pct = factors_impact.apply(v_counts)

# apply functions along an axis using apply() methods

factors = ['Economy', 'Family', 'Health', 'Freedom', 'Trust', 'Generosity', 'Dystopia Residual']

def percentages(col):
    div = col/happiness2015['Happiness Score']
    return div * 100

factor_percentages = happiness2015[factors].apply(percentages)
