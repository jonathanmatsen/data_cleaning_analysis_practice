#working with strings

world_dev = pd.read_csv("World_dev.csv")
col_renaming = {'SourceOfMostRecentIncomeAndExpenditureData': 'IESurvey'}

merged = pd.merge(left=happiness2015, right=world_dev, how='left', left_on='Country', right_on='ShortName')

merged = merged.rename(col_renaming, axis=1)

#use apply to transform strings

def extract_last_word(element):
   return str(element).split()[-1]

merged['Currency Apply'] = merged['CurrencyUnit'].apply(extract_last_word)

print(merged['Currency Apply'].head())

# vectorized string methods

merged['Currency Vectorized'] = merged['CurrencyUnit'].str.split().str.get(-1)

print(merged['Currency Vectorized'].head())

#explore missing values
lengths = merged['CurrencyUnit'].str.len()

value_counts = lengths.value_counts(dropna=False)

#finding specific words
pattern = r"[Nn]ational accounts"

national_accounts = merged['SpecialNotes'].str.contains(pattern)

print(national_accounts.head())

pattern = r"[Nn]ational accounts"

national_accounts = merged['SpecialNotes'].str.contains(pattern, na=False)

merged_national_accounts = merged[national_accounts]

print(merged_national_accounts.head())

#extract substring from series

pattern =r"([1-2][0-9]{3})"

years = merged['SpecialNotes'].str.extract(pattern)

#return extracted substring results as a dataframe

pattern = r"([1-2][0-9]{3})"

years = merged['SpecialNotes'].str.extract(pattern, expand=True)

#extract all matches of pattern from series

pattern = r"(?P<Years>[1-2][0-9]{3})"

years = merged['IESurvey'].str.extractall(pattern)

value_counts = years['Years'].value_counts()

print(value_counts)
